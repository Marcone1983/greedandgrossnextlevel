name: Build APK

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Install React Native dependencies with auto-resolution
        run: |
          echo "üì¶ Installing JavaScript dependencies with smart resolution..."
          
          # Create .npmrc for better dependency resolution
          echo "legacy-peer-deps=true" > .npmrc
          echo "auto-install-peers=true" >> .npmrc
          
          # Remove problematic packages
          echo "üóëÔ∏è Removing problematic packages..."
          npm uninstall detox expo expo-modules-core --save-dev --legacy-peer-deps || true
          
          # Clean cache
          npm cache clean --force
          
          # Install with automatic resolution
          echo "üîß Installing with automatic version resolution..."
          npm install --legacy-peer-deps || {
            echo "‚ö†Ô∏è First install failed, trying with force..."
            npm install --force
          }
          
          # Let React Native resolve its own dependencies
          echo "üîÑ Ensuring React Native compatibility..."
          npx react-native-clean-project-auto -y || true
          
      - name: Install React Native CLI
        run: npm install -g @react-native-community/cli
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Find React Native Android directory
        run: |
          echo "üîç Looking for React Native Android project..."
          
          # First check for standard React Native android directory
          if [ -d "android" ]; then
            echo "‚úÖ Found standard React Native android directory"
            echo "ANDROID_DIR=android" >> $GITHUB_ENV
          elif [ -d "GreedGross" ]; then
            echo "‚úÖ Found GreedGross directory"
            echo "ANDROID_DIR=GreedGross" >> $GITHUB_ENV
          else
            echo "üîç Searching for Android project directories..."
            find . -name "build.gradle" -path "*/android/*" | head -5
            find . -name "gradlew" -not -path "*/node_modules/*" | head -5
            
            # Find gradlew NOT in node_modules
            GRADLEW_PATH=$(find . -name "gradlew" -not -path "*/node_modules/*" | head -1)
            if [ -n "$GRADLEW_PATH" ]; then
              GRADLEW_DIR=$(dirname "$GRADLEW_PATH")
              echo "‚úÖ Found gradlew at: $GRADLEW_PATH"
              echo "ANDROID_DIR=$GRADLEW_DIR" >> $GITHUB_ENV
            else
              echo "‚ùå No Android project found!"
              exit 1
            fi
          fi
        
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
        
      - name: Build React Native Android APK
        run: |
          cd "$ANDROID_DIR"
          echo "üèóÔ∏è Building React Native Android from: $(pwd)"
          
          # Make gradlew executable
          chmod +x gradlew
          
          # Create lasspath if needed
          if [ ! -f "lasspath" ]; then
            echo "üìù Creating empty lasspath file"
            touch lasspath
          fi
          
          # Smart version detection and fixing
          echo "üîß Smart React Native version resolution..."
          
          # Detect current React Native version from package.json
          RN_VERSION=$(node -p "require('../package.json').dependencies['react-native']" 2>/dev/null || echo "0.79.0")
          echo "üìå Detected React Native version: $RN_VERSION"
          
          # Extract major.minor version
          RN_MAJOR_MINOR=$(echo $RN_VERSION | grep -oE '[0-9]+\.[0-9]+' | head -1)
          
          # Create gradle.properties with version overrides
          echo "üîß Creating Gradle properties for auto-resolution..."
          {
            echo ""
            echo "# Auto-resolved versions"
            echo "REACT_NATIVE_VERSION=$RN_MAJOR_MINOR.0"
            echo "android.useAndroidX=true"
            echo "android.enableJetifier=true"
            echo "kotlin.suppressDeprecationWarnings=true"
          } >> gradle.properties
          
          # Fix gradle plugin references dynamically
          echo "üîÑ Updating gradle files to use detected version..."
          find . -name "*.gradle" -not -path "*/node_modules/*" -exec sed -i "s/com.facebook.react:react-native-gradle-plugin:[0-9.]\+/com.facebook.react:react-native-gradle-plugin:$RN_MAJOR_MINOR.0/g" {} \;
          
          echo "‚úÖ React Native version auto-resolved to: $RN_MAJOR_MINOR.0"
          
          # Show what we changed
          echo "üîç Checking gradle files after fix:"
          find . -name "*.gradle" -not -path "*/node_modules/*" -exec grep -H "react-native-gradle-plugin" {} \; || true
          
          # Let Gradle refresh dependencies and resolve versions
          echo "üîÑ Refreshing Gradle dependencies..."
          ./gradlew --refresh-dependencies || true
          
          # Clean previous builds
          echo "üßπ Cleaning previous builds..."
          ./gradlew clean || true
          
          # Remove Detox interference if exists
          if [ -f "settings.gradle" ]; then
            echo "üîß Backing up and fixing settings.gradle..."
            cp settings.gradle settings.gradle.backup
            # Remove detox lines
            grep -v "detox" settings.gradle.backup > settings.gradle || cp settings.gradle.backup settings.gradle
          fi
          
          # List files for debug
          echo "üìÅ Android project files:"
          ls -la
          
          # Fix autolinking for custom directory structure
          echo "üîó Fixing React Native autolinking..."
          if [ -f "../react-native.config.js" ]; then
            echo "‚úÖ Found react-native.config.js"
          else
            echo "üìù Creating react-native.config.js for custom android directory..."
            printf '%s\n' \
              "module.exports = {" \
              "  project: {" \
              "    ios: {}," \
              "    android: {" \
              "      sourceDir: './${ANDROID_DIR}'," \
              "      manifestPath: 'app/src/main/AndroidManifest.xml'," \
              "    }," \
              "  }," \
              "  dependencies: {" \
              "    // Auto-exclude problematic dependencies" \
              "    'detox': {" \
              "      platforms: {" \
              "        android: null," \
              "      }," \
              "    }," \
              "  }," \
              "};" > ../react-native.config.js
          fi
          
          # Build APK with auto-resolution enabled
          echo "üèóÔ∏è Building APK with automatic dependency resolution..."
          ./gradlew assembleDebug \
            -x test \
            -x lint \
            --refresh-dependencies \
            --continue \
            --stacktrace \
            -Dorg.gradle.jvmargs="-Xmx4g -XX:MaxMetaspaceSize=512m" \
            -Pandroid.enableJetifier=true \
            -Pandroid.useAndroidX=true
          
      - name: Find and upload APK
        run: |
          echo "üîç Searching for APK files..."
          find . -name "*.apk" -type f
          
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: |
            ./**/build/outputs/apk/debug/*.apk
            ./**/build/outputs/apk/**/*.apk
          retention-days: 30
          
      - name: Upload mapping files (if exists)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mapping-files
          path: |
            ./**/build/outputs/mapping/debug/
            ./**/build/outputs/mapping/**/*.txt
          retention-days: 30
