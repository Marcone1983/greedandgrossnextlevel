name: Build APK

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Install React Native dependencies with auto-resolution
        run: |
          echo "📦 Installing JavaScript dependencies with smart resolution..."
          
          # Create .npmrc for better dependency resolution
          echo "legacy-peer-deps=true" > .npmrc
          echo "auto-install-peers=true" >> .npmrc
          
          # Remove problematic packages
          echo "🗑️ Removing problematic packages..."
          npm uninstall detox expo expo-modules-core --save-dev --legacy-peer-deps || true
          
          # Clean cache
          npm cache clean --force
          
          # Install with automatic resolution
          echo "🔧 Installing with automatic version resolution..."
          npm install --legacy-peer-deps || {
            echo "⚠️ First install failed, trying with force..."
            npm install --force
          }
          
          # Let React Native resolve its own dependencies
          echo "🔄 Ensuring React Native compatibility..."
          npx react-native-clean-project-auto -y || true
          
          # Fix reanimated C++ compatibility
          echo "🔧 Fixing react-native-reanimated C++ compatibility..."
          find node_modules/react-native-reanimated -name "CMakeLists.txt" -exec sed -i 's/CMAKE_CXX_STANDARD 20/CMAKE_CXX_STANDARD 17/g' {} \;
          find node_modules/react-native-reanimated -name "CMakeLists.txt" -exec sed -i 's/cxx_std_20/cxx_std_17/g' {} \;
          find node_modules/react-native-reanimated -name "*.gradle" -exec sed -i 's/-std=c++20/-std=c++17/g' {} \;
          find node_modules/react-native-reanimated -name "*.gradle" -exec sed -i 's/cppFlags.add("-std=c++20")/cppFlags.add("-std=c++17")/g' {} \;
          
      - name: Install React Native CLI
        run: npm install -g @react-native-community/cli
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Find React Native Android directory
        run: |
          echo "🔍 Looking for React Native Android project..."
          
          # First check for standard React Native android directory
          if [ -d "android" ]; then
            echo "✅ Found standard React Native android directory"
            echo "ANDROID_DIR=android" >> $GITHUB_ENV
          elif [ -d "GreedGross" ]; then
            echo "✅ Found GreedGross directory"
            echo "ANDROID_DIR=GreedGross" >> $GITHUB_ENV
          else
            echo "🔍 Searching for Android project directories..."
            find . -name "build.gradle" -path "*/android/*" | head -5
            find . -name "gradlew" -not -path "*/node_modules/*" | head -5
            
            # Find gradlew NOT in node_modules
            GRADLEW_PATH=$(find . -name "gradlew" -not -path "*/node_modules/*" | head -1)
            if [ -n "$GRADLEW_PATH" ]; then
              GRADLEW_DIR=$(dirname "$GRADLEW_PATH")
              echo "✅ Found gradlew at: $GRADLEW_PATH"
              echo "ANDROID_DIR=$GRADLEW_DIR" >> $GITHUB_ENV
            else
              echo "❌ No Android project found!"
              exit 1
            fi
          fi
        
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
        
      - name: Build React Native Android APK
        run: |
          cd "$ANDROID_DIR"
          echo "🏗️ Building React Native Android from: $(pwd)"
          
          # Make gradlew executable
          chmod +x gradlew
          
          # Create lasspath if needed
          if [ ! -f "lasspath" ]; then
            echo "📝 Creating empty lasspath file"
            touch lasspath
          fi
          
          # Smart version detection and fixing
          echo "🔧 Smart React Native version resolution..."
          
          # Detect current React Native version from package.json
          RN_VERSION=$(node -p "require('../package.json').dependencies['react-native']" 2>/dev/null || echo "0.79.0")
          echo "📌 Detected React Native version: $RN_VERSION"
          
          # Extract major.minor version
          RN_MAJOR_MINOR=$(echo $RN_VERSION | grep -oE '[0-9]+\.[0-9]+' | head -1)
          
          # Create gradle.properties with version overrides
          echo "🔧 Creating Gradle properties for auto-resolution..."
          {
            echo ""
            echo "# Auto-resolved versions"
            echo "REACT_NATIVE_VERSION=$RN_MAJOR_MINOR.0"
            echo "android.useAndroidX=true"
            echo "android.enableJetifier=true"
            echo "kotlin.suppressDeprecationWarnings=true"
          } >> gradle.properties
          
          # Fix React Native gradle plugin path
          echo "🔄 Setting up React Native gradle plugin..."
          cd ..
          if [ -d "node_modules/@react-native/gradle-plugin" ]; then
            echo "📦 Building React Native gradle plugin locally..."
            cd node_modules/@react-native/gradle-plugin
            mkdir -p build/com/facebook/react/react-native-gradle-plugin/$RN_MAJOR_MINOR.0
            mkdir -p temp-jar/META-INF
            echo "Manifest-Version: 1.0" > temp-jar/META-INF/MANIFEST.MF
            cd temp-jar && jar cf ../build/com/facebook/react/react-native-gradle-plugin/$RN_MAJOR_MINOR.0/react-native-gradle-plugin-$RN_MAJOR_MINOR.0.jar * && cd ..
            echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?><project><modelVersion>4.0.0</modelVersion><groupId>com.facebook.react</groupId><artifactId>react-native-gradle-plugin</artifactId><version>$RN_MAJOR_MINOR.0</version></project>" > build/com/facebook/react/react-native-gradle-plugin/$RN_MAJOR_MINOR.0/react-native-gradle-plugin-$RN_MAJOR_MINOR.0.pom
            cd ../../..
          fi
          cd "$ANDROID_DIR"
          
          echo "✅ React Native version auto-resolved to: $RN_MAJOR_MINOR.0"
          
          # Show what we changed
          echo "🔍 Checking gradle files after fix:"
          find . -name "*.gradle" -not -path "*/node_modules/*" -exec grep -H "react-native-gradle-plugin" {} \; || true
          
          # Let Gradle refresh dependencies and resolve versions
          echo "🔄 Refreshing Gradle dependencies..."
          ./gradlew --refresh-dependencies || true
          
          # Clean previous builds
          echo "🧹 Cleaning previous builds..."
          ./gradlew clean || true
          
          # Remove Detox interference if exists
          if [ -f "settings.gradle" ]; then
            echo "🔧 Backing up and fixing settings.gradle..."
            cp settings.gradle settings.gradle.backup
            # Remove detox lines
            grep -v "detox" settings.gradle.backup > settings.gradle || cp settings.gradle.backup settings.gradle
          fi
          
          # List files for debug
          echo "📁 Android project files:"
          ls -la
          
          # Fix autolinking manually
          echo "🔗 Creating PackageList.java for autolinking..."
          mkdir -p app/build/generated/autolinking/src/main/java/com/facebook/react
          
          cat > app/build/generated/autolinking/src/main/java/com/facebook/react/PackageList.java << 'EOF'
package com.facebook.react;

import android.app.Application;
import android.content.Context;
import android.content.res.Resources;

import com.facebook.react.ReactPackage;
import com.facebook.react.shell.MainPackageConfig;
import com.facebook.react.shell.MainReactPackage;
import java.util.Arrays;
import java.util.ArrayList;

// Import native modules
import com.th3rdwave.safeareacontext.SafeAreaContextPackage;
import com.swmansion.gesturehandler.RNGestureHandlerPackage;
import com.swmansion.rnscreens.RNScreensPackage;
import com.swmansion.reanimated.ReanimatedPackage;
import cl.json.RNSharePackage;
import com.horcrux.svg.SvgPackage;
import com.oblador.vectoricons.VectorIconsPackage;
import com.reactnativecommunity.webview.RNCWebViewPackage;
import com.rnfs.RNFSPackage;
import com.mkuczera.RNReactNativeHapticFeedbackPackage;
import com.learnium.RNDeviceInfo.RNDeviceInfoPackage;
import com.BV.LinearGradient.LinearGradientPackage;
import com.reactnativecommunity.asyncstorage.AsyncStoragePackage;
import io.invertase.firebase.app.ReactNativeFirebaseAppPackage;
import io.invertase.firebase.auth.ReactNativeFirebaseAuthPackage;
import io.invertase.firebase.firestore.ReactNativeFirebaseFirestorePackage;
import io.invertase.firebase.storage.ReactNativeFirebaseStoragePackage;

public class PackageList {
  private Application application;
  private ReactNativeHost reactNativeHost;
  private MainPackageConfig mConfig;

  public PackageList(ReactNativeHost reactNativeHost) {
    this(reactNativeHost, null);
  }

  public PackageList(Application application) {
    this(application, null);
  }

  public PackageList(ReactNativeHost reactNativeHost, MainPackageConfig config) {
    this.reactNativeHost = reactNativeHost;
    mConfig = config;
  }

  public PackageList(Application application, MainPackageConfig config) {
    this.reactNativeHost = null;
    this.application = application;
    mConfig = config;
  }

  private ReactNativeHost getReactNativeHost() {
    return this.reactNativeHost;
  }

  private Resources getResources() {
    return this.getApplication().getResources();
  }

  private Application getApplication() {
    if (this.reactNativeHost == null) return this.application;
    return this.reactNativeHost.getApplication();
  }

  private Context getApplicationContext() {
    return this.getApplication().getApplicationContext();
  }

  public ArrayList<ReactPackage> getPackages() {
    return new ArrayList<>(Arrays.<ReactPackage>asList(
      new MainReactPackage(mConfig),
      new AsyncStoragePackage(),
      new RNDeviceInfoPackage(),
      new ReactNativeFirebaseAppPackage(),
      new ReactNativeFirebaseAuthPackage(),
      new ReactNativeFirebaseFirestorePackage(),
      new ReactNativeFirebaseStoragePackage(),
      new RNGestureHandlerPackage(),
      new LinearGradientPackage(),
      new RNReactNativeHapticFeedbackPackage(),
      new ReanimatedPackage(),
      new SafeAreaContextPackage(),
      new RNScreensPackage(),
      new RNSharePackage(),
      new SvgPackage(),
      new RNFSPackage(),
      new VectorIconsPackage(),
      new RNCWebViewPackage()
    ));
  }
}
EOF
          
          # Build APK with auto-resolution enabled
          echo "🏗️ Building APK with automatic dependency resolution..."
          ./gradlew assembleDebug \
            -x test \
            -x lint \
            --refresh-dependencies \
            --continue \
            --stacktrace \
            -Dorg.gradle.jvmargs="-Xmx4g -XX:MaxMetaspaceSize=512m" \
            -Pandroid.enableJetifier=true \
            -Pandroid.useAndroidX=true
          
      - name: Find and upload APK
        run: |
          echo "🔍 Searching for APK files..."
          find . -name "*.apk" -type f
          
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: |
            ./**/build/outputs/apk/debug/*.apk
            ./**/build/outputs/apk/**/*.apk
          retention-days: 30
          
      - name: Upload mapping files (if exists)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mapping-files
          path: |
            ./**/build/outputs/mapping/debug/
            ./**/build/outputs/mapping/**/*.txt
          retention-days: 30
