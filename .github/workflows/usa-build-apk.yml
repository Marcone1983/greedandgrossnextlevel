name: Usa Build APK

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          
      - run: npm install --legacy-peer-deps
      
      - name: Setup Android
        run: |
          # Keep original GreedGross directory structure
          cd GreedGross
          chmod +x gradlew
          
          # Fix gradle wrapper properties to ensure correct jar path
          if [ -f gradle/wrapper/gradle-wrapper.properties ]; then
            sed -i 's|distributionUrl=.*|distributionUrl=https\\://services.gradle.org/distributions/gradle-8.10.2-all.zip|' gradle/wrapper/gradle-wrapper.properties
          fi
          
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          
          # Download gradle wrapper jar if missing
          if [ ! -f gradle/wrapper/gradle-wrapper.jar ]; then
            mkdir -p gradle/wrapper
            curl -L https://github.com/gradle/gradle/raw/v8.10.2/gradle/wrapper/gradle-wrapper.jar -o gradle/wrapper/gradle-wrapper.jar
          fi
          cd ..
          
      - name: Update React Native config for renamed android directory
        run: |
          # Update react-native.config.js to point to renamed android directory
          cat > react-native.config.js << 'EOF'
          module.exports = {
            project: {
              ios: {},
              android: {
                sourceDir: './GreedGross',
                manifestPath: 'app/src/main/AndroidManifest.xml',
                packageName: 'com.greedandgross.cannabisbreeding',
              },
            },
          };
          EOF
          
      - name: Setup RN gradle plugin
        run: |
          if [ -d "node_modules/@react-native/gradle-plugin" ]; then
            cd node_modules/@react-native/gradle-plugin
            mkdir -p build/com/facebook/react/react-native-gradle-plugin/0.79.0
            mkdir -p temp-jar/META-INF
            echo "Manifest-Version: 1.0" > temp-jar/META-INF/MANIFEST.MF
            cd temp-jar && jar cf ../build/com/facebook/react/react-native-gradle-plugin/0.79.0/react-native-gradle-plugin-0.79.0.jar * && cd ..
            echo '<?xml version="1.0" encoding="UTF-8"?><project><modelVersion>4.0.0</modelVersion><groupId>com.facebook.react</groupId><artifactId>react-native-gradle-plugin</artifactId><version>0.79.0</version></project>' > build/com/facebook/react/react-native-gradle-plugin/0.79.0/react-native-gradle-plugin-0.79.0.pom
            cd ../../..
          fi
          
      - name: Fix reanimated C++ compatibility
        run: |
          # Fix Hermes detection
          sed -i '165s/if (appProject?.hermesEnabled?.toBoolean() || appProject?.ext?.react?.enableHermes?.toBoolean())/if (true)/' node_modules/react-native-reanimated/android/build.gradle || true
          
          # Force C++17 instead of C++20 to fix std::regular error
          find node_modules/react-native-reanimated -name "CMakeLists.txt" -exec sed -i 's/CMAKE_CXX_STANDARD 20/CMAKE_CXX_STANDARD 17/g' {} \;
          find node_modules/react-native-reanimated -name "CMakeLists.txt" -exec sed -i 's/cxx_std_20/cxx_std_17/g' {} \;
          
          # Also fix in build.gradle files
          find node_modules/react-native-reanimated -name "*.gradle" -exec sed -i 's/-std=c++20/-std=c++17/g' {} \;
          find node_modules/react-native-reanimated -name "*.gradle" -exec sed -i 's/cppFlags.add("-std=c++20")/cppFlags.add("-std=c++17")/g' {} \;
          
      - name: Verify native modules
        run: |
          echo "Checking if all native modules are installed..."
          for module in react-native-reanimated react-native-safe-area-context react-native-screens react-native-share react-native-svg react-native-fs react-native-vector-icons react-native-webview; do
            if [ ! -d "node_modules/$module/android" ]; then
              echo "ERROR: $module/android directory not found!"
              npm install $module --legacy-peer-deps
            else
              echo "âœ“ $module found"
            fi
          done
          
      - name: Fix autolinking manually
        run: |
          # Create the autolinking directory
          mkdir -p GreedGross/app/build/generated/autolinking/src/main/java/com/facebook/react
          
          # Create PackageList.java manually with correct imports
          cat > GreedGross/app/build/generated/autolinking/src/main/java/com/facebook/react/PackageList.java << 'EOF'
package com.facebook.react;

import android.app.Application;
import android.content.Context;
import android.content.res.Resources;

import com.facebook.react.ReactPackage;
import com.facebook.react.shell.MainPackageConfig;
import com.facebook.react.shell.MainReactPackage;
import java.util.Arrays;
import java.util.ArrayList;

// Import solo i pacchetti che effettivamente usi
import com.th3rdwave.safeareacontext.SafeAreaContextPackage;
import com.swmansion.gesturehandler.RNGestureHandlerPackage;
import com.swmansion.rnscreens.RNScreensPackage;
import com.swmansion.reanimated.ReanimatedPackage;
import cl.json.RNSharePackage;
import com.horcrux.svg.SvgPackage;
import com.oblador.vectoricons.VectorIconsPackage;
import com.reactnativecommunity.webview.RNCWebViewPackage;
import com.rnfs.RNFSPackage;
import com.mkuczera.RNReactNativeHapticFeedbackPackage;
import com.learnium.RNDeviceInfo.RNDeviceInfoPackage;
import com.BV.LinearGradient.LinearGradientPackage;
import com.reactnativecommunity.asyncstorage.AsyncStoragePackage;
import io.invertase.firebase.app.ReactNativeFirebaseAppPackage;
import io.invertase.firebase.auth.ReactNativeFirebaseAuthPackage;
import io.invertase.firebase.firestore.ReactNativeFirebaseFirestorePackage;
import io.invertase.firebase.storage.ReactNativeFirebaseStoragePackage;

public class PackageList {
  private Application application;
  private ReactNativeHost reactNativeHost;
  private MainPackageConfig mConfig;

  public PackageList(ReactNativeHost reactNativeHost) {
    this(reactNativeHost, null);
  }

  public PackageList(Application application) {
    this(application, null);
  }

  public PackageList(ReactNativeHost reactNativeHost, MainPackageConfig config) {
    this.reactNativeHost = reactNativeHost;
    mConfig = config;
  }

  public PackageList(Application application, MainPackageConfig config) {
    this.reactNativeHost = null;
    this.application = application;
    mConfig = config;
  }

  private ReactNativeHost getReactNativeHost() {
    return this.reactNativeHost;
  }

  private Resources getResources() {
    return this.getApplication().getResources();
  }

  private Application getApplication() {
    if (this.reactNativeHost == null) return this.application;
    return this.reactNativeHost.getApplication();
  }

  private Context getApplicationContext() {
    return this.getApplication().getApplicationContext();
  }

  public ArrayList<ReactPackage> getPackages() {
    return new ArrayList<>(Arrays.<ReactPackage>asList(
      new MainReactPackage(mConfig),
      new AsyncStoragePackage(),
      new RNDeviceInfoPackage(),
      new ReactNativeFirebaseAppPackage(),
      new ReactNativeFirebaseAuthPackage(),
      new ReactNativeFirebaseFirestorePackage(),
      new ReactNativeFirebaseStoragePackage(),
      new RNGestureHandlerPackage(),
      new LinearGradientPackage(),
      new RNReactNativeHapticFeedbackPackage(),
      new ReanimatedPackage(),
      new SafeAreaContextPackage(),
      new RNScreensPackage(),
      new RNSharePackage(),
      new SvgPackage(),
      new RNFSPackage(),
      new VectorIconsPackage(),
      new RNCWebViewPackage()
    ));
  }
}
EOF
          
      - name: Usa Build apk action
        uses: ./.github/actions/build-apk
        with:
          flavour: release