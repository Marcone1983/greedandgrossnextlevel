name: Build APK

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Install React Native dependencies
        run: |
          echo "📦 Installing JavaScript dependencies..."
          npm install
          
          # Remove problematic Detox
          echo "🗑️ Removing Detox to prevent build conflicts..."
          rm -rf node_modules/detox
          npm uninstall detox --save-dev || true
          
          # Let npm/yarn resolve compatible versions
          echo "🔧 Resolving compatible React Native dependencies..."
          npm install --legacy-peer-deps || npm install
          
      - name: Install React Native CLI
        run: npm install -g @react-native-community/cli
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Find React Native Android directory
        run: |
          echo "🔍 Looking for React Native Android project..."
          
          # First check for standard React Native android directory
          if [ -d "android" ]; then
            echo "✅ Found standard React Native android directory"
            echo "ANDROID_DIR=android" >> $GITHUB_ENV
          elif [ -d "GreedGross" ]; then
            echo "✅ Found GreedGross directory"
            echo "ANDROID_DIR=GreedGross" >> $GITHUB_ENV
          else
            echo "🔍 Searching for Android project directories..."
            find . -name "build.gradle" -path "*/android/*" | head -5
            find . -name "gradlew" -not -path "*/node_modules/*" | head -5
            
            # Find gradlew NOT in node_modules
            GRADLEW_PATH=$(find . -name "gradlew" -not -path "*/node_modules/*" | head -1)
            if [ -n "$GRADLEW_PATH" ]; then
              GRADLEW_DIR=$(dirname "$GRADLEW_PATH")
              echo "✅ Found gradlew at: $GRADLEW_PATH"
              echo "ANDROID_DIR=$GRADLEW_DIR" >> $GITHUB_ENV
            else
              echo "❌ No Android project found!"
              exit 1
            fi
          fi
        
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
        
      - name: Build React Native Android APK
        run: |
          cd "$ANDROID_DIR"
          echo "🏗️ Building React Native Android from: $(pwd)"
          
          # Make gradlew executable
          chmod +x gradlew
          
          # Create lasspath if needed
          if [ ! -f "lasspath" ]; then
            echo "📝 Creating empty lasspath file"
            touch lasspath
          fi
          
          # Check what React Native version is actually installed
          echo "🔍 Checking installed React Native version..."
          if [ -f "../package.json" ]; then
            grep "react-native" ../package.json || true
          fi
          
          # Check what's in node_modules
          echo "🔍 Checking available React Native gradle plugin..."
          find ../node_modules -name "*gradle-plugin*" -type d | head -5 || true
          ls -la ../node_modules/@react-native/ 2>/dev/null || true
          ls -la ../node_modules/react-native/android/ 2>/dev/null || true
          
          # Remove version requirements - let it use whatever is available
          echo "🔧 Removing specific version requirements..."
          if [ -f "build.gradle" ]; then
            # Replace specific versions with classpath from node_modules
            sed -i 's/com\.facebook\.react:react-native-gradle-plugin:[0-9\.]*//g' build.gradle
            # Use the plugin from node_modules path
            echo "" >> build.gradle
            echo "// Auto-added: Use React Native plugin from node_modules" >> build.gradle
            echo "apply from: file(\"../node_modules/@react-native/gradle-plugin/react.gradle\")" >> build.gradle
          fi
          
          # Check for gradle.properties and add Maven repos
          if [ -f "gradle.properties" ]; then
            echo "🔧 Adding Maven repositories..."
            echo "" >> gradle.properties
            echo "# Auto-added: Maven repositories" >> gradle.properties
            echo "android.useAndroidX=true" >> gradle.properties
            echo "android.enableJetifier=true" >> gradle.properties
          fi
          
          # Remove Detox interference if exists
          if [ -f "settings.gradle" ]; then
            echo "🔧 Backing up and fixing settings.gradle..."
            cp settings.gradle settings.gradle.backup
            # Remove detox lines
            grep -v "detox" settings.gradle.backup > settings.gradle || cp settings.gradle.backup settings.gradle
          fi
          
          # Show final build.gradle
          echo "🔍 Final build.gradle:"
          cat build.gradle | tail -10
          
          # List files for debug
          echo "📁 Android project files:"
          ls -la
          
          # Try different build commands in order of preference
          echo "🏗️ Trying to build APK..."
          if ./gradlew assembleDebug -x test -x lint --stacktrace; then
            echo "✅ assembleDebug succeeded"
          elif ./gradlew build -x test -x lint --stacktrace; then
            echo "✅ build succeeded"
          elif ./gradlew assemble -x test -x lint --stacktrace; then
            echo "✅ assemble succeeded"
          else
            echo "❌ All build attempts failed"
            echo "📋 Available tasks:"
            ./gradlew tasks | grep -i assemble || true
            exit 1
          fi
          
      - name: Find and upload APK
        run: |
          echo "🔍 Searching for APK files..."
          find . -name "*.apk" -type f
          
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: |
            ./**/build/outputs/apk/debug/*.apk
            ./**/build/outputs/apk/**/*.apk
          retention-days: 30
          
      - name: Upload mapping files (if exists)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mapping-files
          path: |
            ./**/build/outputs/mapping/debug/
            ./**/build/outputs/mapping/**/*.txt
          retention-days: 30
