name: Build APK

on:
  workflow_dispatch:
  push:
    branches: 
      - main
      - '**'

jobs:
  build:
    name: Build APK 
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Prevent hanging builds
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Android SDK is pre-installed on GitHub Actions runners

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Create .env file
        run: |
          cat > .env << EOF
          FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL=${{ secrets.OPENAI_MODEL }}
          REVENUECAT_API_KEY_IOS=${{ secrets.REVENUECAT_API_KEY_IOS }}
          REVENUECAT_API_KEY_ANDROID=${{ secrets.REVENUECAT_API_KEY_ANDROID }}
          API_BASE_URL=${{ secrets.API_BASE_URL }}
          WEBSOCKET_URL=${{ secrets.WEBSOCKET_URL }}
          ADMIN_SECRET=${{ secrets.ADMIN_SECRET }}
          APP_VERSION=${{ secrets.APP_VERSION }}
          ENVIRONMENT=production
          EOF

      - name: Setup Android project
        run: |
          cd GreedGross
          chmod +x gradlew
          
          # Create lasspath as TRULY EMPTY file - Gradle wants it but it must be empty!
          echo -n > lasspath  # This creates a truly empty file without newline
          
          # Create local.properties with SDK path
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          
          # Ensure gradle wrapper is executable
          chmod +x ../node_modules/@react-native/gradle-plugin/gradlew
          
          # Create google-services.json
          cat > app/google-services.json << EOF
          {
            "project_info": {
              "project_number": "${{ secrets.FIREBASE_PROJECT_NUMBER }}",
              "project_id": "${{ secrets.FIREBASE_PROJECT_ID }}",
              "storage_bucket": "${{ secrets.FIREBASE_STORAGE_BUCKET }}"
            },
            "client": [
              {
                "client_info": {
                  "mobilesdk_app_id": "${{ secrets.FIREBASE_APP_ID }}",
                  "android_client_info": {
                    "package_name": "com.greedandgross.cannabisbreeding"
                  }
                },
                "oauth_client": [
                  {
                    "client_id": "${{ secrets.FIREBASE_CLIENT_ID }}",
                    "client_type": 3
                  }
                ],
                "api_key": [
                  {
                    "current_key": "${{ secrets.FIREBASE_API_KEY }}"
                  }
                ],
                "services": {
                  "appinvite_service": {
                    "other_platform_oauth_client": [
                      {
                        "client_id": "${{ secrets.FIREBASE_CLIENT_ID }}",
                        "client_type": 3
                      }
                    ]
                  }
                }
              }
            ],
            "configuration_version": "1"
          }
          EOF
          
          # Setup release keystore (manteniamo il nome esistente)
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > app/greed-gross-release-key.keystore
          
          # Add signing config to gradle.properties
          cat >> gradle.properties << EOF
          
          GREED_GROSS_UPLOAD_STORE_FILE=greed-gross-release-key.keystore
          GREED_GROSS_UPLOAD_STORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          GREED_GROSS_UPLOAD_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}
          GREED_GROSS_UPLOAD_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}
          EOF

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.10.2
          
      - name: Verify environment
        run: |
          echo "=== .env contents (without secrets) ==="
          cat .env | grep -v 'KEY'  # Avoid printing secrets
          echo "=== Android SDK ==="
          echo $ANDROID_SDK_ROOT
          echo "=== Java version ==="
          java -version

      - name: Setup React Native Gradle Plugin
        run: |
          echo "=== Setting up React Native Gradle Plugin ==="
          if [ -d "node_modules/@react-native/gradle-plugin" ]; then
            cd node_modules/@react-native/gradle-plugin
            
            # Create the Maven repository structure that Gradle expects
            mkdir -p build/com/facebook/react/react-native-gradle-plugin/0.79.0
            
            # Check if there's a pre-built JAR or we need to build it
            if [ -f "react-native-gradle-plugin/build/libs/react-native-gradle-plugin.jar" ]; then
              echo "Found pre-built JAR"
              cp react-native-gradle-plugin/build/libs/react-native-gradle-plugin.jar \
                 build/com/facebook/react/react-native-gradle-plugin/0.79.0/react-native-gradle-plugin-0.79.0.jar
            else
              echo "No pre-built JAR found, creating a minimal one"
              # Create a minimal JAR just to satisfy the dependency
              mkdir -p temp-jar/META-INF
              echo "Manifest-Version: 1.0" > temp-jar/META-INF/MANIFEST.MF
              cd temp-jar && jar cf ../build/com/facebook/react/react-native-gradle-plugin/0.79.0/react-native-gradle-plugin-0.79.0.jar * && cd ..
            fi
            
            # Create POM file
            cat > build/com/facebook/react/react-native-gradle-plugin/0.79.0/react-native-gradle-plugin-0.79.0.pom << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.facebook.react</groupId>
  <artifactId>react-native-gradle-plugin</artifactId>
  <version>0.79.0</version>
</project>
EOF
            
            cd ../../..
          else
            echo "ERROR: React Native gradle plugin directory not found!"
            exit 1
          fi
          
      - name: Fix React Native Reanimated
        run: |
          # Patch for react-native-reanimated compatibility with RN 0.79
          sed -i '165s/if (appProject?.hermesEnabled?.toBoolean() || appProject?.ext?.react?.enableHermes?.toBoolean())/if (true)/' node_modules/react-native-reanimated/android/build.gradle

      - name: Fix React Native Autolinking
        run: |
          # Fix autolinking issue with React Native 0.79
          echo -e "\nandroid {\n  namespace \"com.facebook.react\"\n  defaultConfig {\n    applicationId \"com.facebook.react\"\n  }\n}" >> node_modules/react-native/ReactAndroid/build.gradle || true

          
      - name: Verify Gradle Setup
        run: |
          cd GreedGross
          echo "=== Testing Gradle wrapper ==="
          ./gradlew --version || {
            echo "::error::Gradle wrapper not working"
            exit 1
          }
          
          echo "=== Checking Gradle properties ==="
          ./gradlew properties --no-daemon 2>&1 | grep -E "rootProject|buildDir|android.compileSdk" | head -20 || true

      - name: Build APK
        run: |
          cd GreedGross
          
          # Check current directory structure
          echo "=== Current directory ==="
          pwd
          echo "=== Files in current directory ==="
          ls -la
          
          # Check if settings.gradle exists
          echo "=== Checking settings.gradle ==="
          if [ -f "settings.gradle" ]; then
            echo "settings.gradle exists:"
            cat settings.gradle
          else
            echo "ERROR: settings.gradle NOT FOUND!"
          fi
          
          # First clean any previous builds
          echo "=== Cleaning project ==="
          ./gradlew clean --no-daemon --stacktrace || echo "Clean failed, continuing anyway"
          
          # List available tasks WITHOUT -c flag (let Gradle find settings.gradle naturally)
          echo "=== Available Gradle tasks ==="
          ./gradlew tasks --all --no-daemon --stacktrace || echo "Failed to list tasks"
          
          # Try to run assembleRelease
          echo "=== Starting build ==="
          ./gradlew assembleRelease --no-daemon --stacktrace --info 2>&1 | tee build.log
          
          # Check if build actually created an APK
          echo "=== Checking if APK was created ==="
          if [ -f "app/build/outputs/apk/release/app-release.apk" ] || [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
            echo "APK found!"
            ls -la app/build/outputs/apk/release/
          else
            echo "::error::No APK was created! Build may have succeeded but produced no output"
            echo "=== Build log contents ==="
            cat build.log
            echo "=== Checking what Gradle actually did ==="
            grep -i "BUILD SUCCESSFUL\|Task :\|UP-TO-DATE\|SKIPPED" build.log || true
            exit 1
          fi

      - name: Check build outputs
        if: always()
        run: |
          echo "=== Searching for APK files ==="
          find GreedGross -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
          echo ""
          echo "=== Checking build directory ==="
          ls -la GreedGross/app/build/outputs/ 2>/dev/null || echo "No outputs directory"
          echo ""
          echo "=== Checking for build errors in log ==="
          if [ -f GreedGross/build.log ]; then
            grep -i "failed\|error" GreedGross/build.log | tail -20 || true
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: greed-gross-apk
          path: |
            GreedGross/app/build/outputs/apk/release/*.apk
            GreedGross/app/build/outputs/apk/debug/*.apk
          retention-days: 30
          if-no-files-found: warn

      - name: Create build summary
        run: |
          echo "## 🚀 GREED & GROSS APK Build Success" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 APK Info" >> $GITHUB_STEP_SUMMARY
          APK_PATH=$(find GreedGross/app/build/outputs/apk/release -name "*Greed&Gross.apk" | head -1)
          if [ -n "$APK_PATH" ]; then
            echo "**Size:** $(ls -lh "$APK_PATH" | awk '{print $5}')" >> $GITHUB_STEP_SUMMARY
            echo "**File:** $(basename "$APK_PATH")" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Features Included" >> $GITHUB_STEP_SUMMARY
          echo "- AI Lab Chat (GPT-4o-mini)" >> $GITHUB_STEP_SUMMARY
          echo "- Global Breeder Chat" >> $GITHUB_STEP_SUMMARY
          echo "- Admin Panel" >> $GITHUB_STEP_SUMMARY
          echo "- 5 Language Support" >> $GITHUB_STEP_SUMMARY
          echo "- Premium Subscriptions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Download from Artifacts tab ↑**" >> $GITHUB_STEP_SUMMARY