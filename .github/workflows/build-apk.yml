name: Build APK

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Prevent hanging builds
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Android SDK is pre-installed on GitHub Actions runners

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Create .env file
        run: |
          cat > .env << EOF
          FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL=${{ secrets.OPENAI_MODEL }}
          REVENUECAT_API_KEY_IOS=${{ secrets.REVENUECAT_API_KEY_IOS }}
          REVENUECAT_API_KEY_ANDROID=${{ secrets.REVENUECAT_API_KEY_ANDROID }}
          API_BASE_URL=${{ secrets.API_BASE_URL }}
          WEBSOCKET_URL=${{ secrets.WEBSOCKET_URL }}
          ADMIN_SECRET=${{ secrets.ADMIN_SECRET }}
          APP_VERSION=${{ secrets.APP_VERSION }}
          ENVIRONMENT=production
          EOF

      - name: Setup Android project
        run: |
          cd GreedGross
          chmod +x gradlew
          
          # DO NOT create lasspath - it confuses Gradle!
          # Gradle thinks it's a settings file!
          rm -rf lasspath 2>/dev/null || true
          
          # Create local.properties with SDK path
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          
          # Create google-services.json
          cat > app/google-services.json << EOF
          {
            "project_info": {
              "project_number": "${{ secrets.FIREBASE_PROJECT_NUMBER }}",
              "project_id": "${{ secrets.FIREBASE_PROJECT_ID }}",
              "storage_bucket": "${{ secrets.FIREBASE_STORAGE_BUCKET }}"
            },
            "client": [
              {
                "client_info": {
                  "mobilesdk_app_id": "${{ secrets.FIREBASE_APP_ID }}",
                  "android_client_info": {
                    "package_name": "com.greedandgross.cannabisbreeding"
                  }
                },
                "oauth_client": [
                  {
                    "client_id": "${{ secrets.FIREBASE_CLIENT_ID }}",
                    "client_type": 3
                  }
                ],
                "api_key": [
                  {
                    "current_key": "${{ secrets.FIREBASE_API_KEY }}"
                  }
                ],
                "services": {
                  "appinvite_service": {
                    "other_platform_oauth_client": [
                      {
                        "client_id": "${{ secrets.FIREBASE_CLIENT_ID }}",
                        "client_type": 3
                      }
                    ]
                  }
                }
              }
            ],
            "configuration_version": "1"
          }
          EOF
          
          # Setup release keystore (manteniamo il nome esistente)
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > app/greed-gross-release-key.keystore
          
          # Add signing config to gradle.properties
          cat >> gradle.properties << EOF
          
          GREED_GROSS_UPLOAD_STORE_FILE=greed-gross-release-key.keystore
          GREED_GROSS_UPLOAD_STORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          GREED_GROSS_UPLOAD_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}
          GREED_GROSS_UPLOAD_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}
          EOF

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.10.2
          
      - name: Verify environment
        run: |
          echo "=== .env contents (without secrets) ==="
          cat .env | grep -v 'KEY'  # Avoid printing secrets
          echo "=== Android SDK ==="
          echo $ANDROID_SDK_ROOT
          echo "=== Java version ==="
          java -version

      - name: Debug React Native Structure
        run: |
          echo "=== Checking React Native structure ==="
          ls -la node_modules/@react-native/ || echo "No @react-native directory"
          echo ""
          echo "=== Checking for gradle plugin ==="
          find node_modules -name "*gradle-plugin*.jar" -type f 2>/dev/null | head -20 || echo "No gradle plugin JARs found"
          echo ""
          echo "=== Checking React Native android directory ==="
          ls -la node_modules/react-native/android/ || echo "No android directory"
          
      - name: Fix React Native Reanimated
        run: |
          # Patch for react-native-reanimated compatibility with RN 0.79
          sed -i '165s/if (appProject?.hermesEnabled?.toBoolean() || appProject?.ext?.react?.enableHermes?.toBoolean())/if (true)/' node_modules/react-native-reanimated/android/build.gradle

      - name: Fix React Native Autolinking
        run: |
          # Fix autolinking issue with React Native 0.79
          echo -e "\nandroid {\n  namespace \"com.facebook.react\"\n  defaultConfig {\n    applicationId \"com.facebook.react\"\n  }\n}" >> node_modules/react-native/ReactAndroid/build.gradle || true

      - name: Build APK
        run: |
          cd GreedGross
          
          # Check current directory structure
          echo "=== Current directory ==="
          pwd
          echo "=== Files in current directory ==="
          ls -la
          
          # Check if settings.gradle exists
          echo "=== Checking settings.gradle ==="
          if [ -f "settings.gradle" ]; then
            echo "settings.gradle exists:"
            cat settings.gradle
          else
            echo "ERROR: settings.gradle NOT FOUND!"
          fi
          
          # First, let's see what tasks are available
          echo "=== Available Gradle tasks ==="
          ./gradlew tasks --all --stacktrace || echo "Failed to list tasks"
          
          # Try to run assembleRelease directly without clean
          echo "=== Starting build ==="
          ./gradlew assembleRelease --no-daemon --stacktrace --info | tee build.log
          
          # Capture build status
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "::error::Build failed! Check logs for details"
            echo "=== LAST 200 LINES OF BUILD LOG ==="
            tail -200 build.log
            echo ""
            echo "=== Searching for Metro/JavaScript errors ==="
            grep -A 20 -B 10 -i "metro\|bundle\|javascript\|js\|error" build.log || true
            exit 1
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: greed-gross-apk
          path: GreedGross/app/build/outputs/apk/release/*Greed&Gross.apk
          retention-days: 30

      - name: Create build summary
        run: |
          echo "## ðŸš€ GREED & GROSS APK Build Success" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“¦ APK Info" >> $GITHUB_STEP_SUMMARY
          APK_PATH=$(find GreedGross/app/build/outputs/apk/release -name "*Greed&Gross.apk" | head -1)
          if [ -n "$APK_PATH" ]; then
            echo "**Size:** $(ls -lh "$APK_PATH" | awk '{print $5}')" >> $GITHUB_STEP_SUMMARY
            echo "**File:** $(basename "$APK_PATH")" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### âœ… Features Included" >> $GITHUB_STEP_SUMMARY
          echo "- AI Lab Chat (GPT-4o-mini)" >> $GITHUB_STEP_SUMMARY
          echo "- Global Breeder Chat" >> $GITHUB_STEP_SUMMARY
          echo "- Admin Panel" >> $GITHUB_STEP_SUMMARY
          echo "- 5 Language Support" >> $GITHUB_STEP_SUMMARY
          echo "- Premium Subscriptions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Download from Artifacts tab â†‘**" >> $GITHUB_STEP_SUMMARY