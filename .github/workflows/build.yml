name: Build Android APK

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          
      - run: npm install --legacy-peer-deps
        
      - name: Create env file
        run: |
          cat > .env << 'ENVEOF'
          FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL=${{ secrets.OPENAI_MODEL }}
          REVENUECAT_API_KEY_IOS=${{ secrets.REVENUECAT_API_KEY_IOS }}
          REVENUECAT_API_KEY_ANDROID=${{ secrets.REVENUECAT_API_KEY_ANDROID }}
          API_BASE_URL=${{ secrets.API_BASE_URL }}
          WEBSOCKET_URL=${{ secrets.WEBSOCKET_URL }}
          ADMIN_SECRET=${{ secrets.ADMIN_SECRET }}
          APP_VERSION=${{ secrets.APP_VERSION }}
          ENVIRONMENT=production
          ENVEOF
          
      - name: Setup Android
        run: |
          cd GreedGross
          # Download a fresh gradlew to avoid the duplicate args issue
          curl -s https://raw.githubusercontent.com/gradle/gradle/v8.10.2/gradlew > gradlew.new
          chmod +x gradlew.new
          mv gradlew.new gradlew
          echo -n > lasspath
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          
      - name: Create google services
        run: |
          cd GreedGross
          cat > app/google-services.json << 'GOOGLEEOF'
          {
            "project_info": {
              "project_number": "${{ secrets.FIREBASE_PROJECT_NUMBER }}",
              "project_id": "${{ secrets.FIREBASE_PROJECT_ID }}",
              "storage_bucket": "${{ secrets.FIREBASE_STORAGE_BUCKET }}"
            },
            "client": [
              {
                "client_info": {
                  "mobilesdk_app_id": "${{ secrets.FIREBASE_APP_ID }}",
                  "android_client_info": {
                    "package_name": "com.greedandgross.cannabisbreeding"
                  }
                },
                "oauth_client": [
                  {
                    "client_id": "${{ secrets.FIREBASE_CLIENT_ID }}",
                    "client_type": 3
                  }
                ],
                "api_key": [
                  {
                    "current_key": "${{ secrets.FIREBASE_API_KEY }}"
                  }
                ],
                "services": {
                  "appinvite_service": {
                    "other_platform_oauth_client": [
                      {
                        "client_id": "${{ secrets.FIREBASE_CLIENT_ID }}",
                        "client_type": 3
                      }
                    ]
                  }
                }
              }
            ],
            "configuration_version": "1"
          }
          GOOGLEEOF
          
      - name: Setup keystore
        run: |
          cd GreedGross
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > app/greed-gross-release-key.keystore
          cat >> gradle.properties << 'GRADLEEOF'
          
          GREED_GROSS_UPLOAD_STORE_FILE=greed-gross-release-key.keystore
          GREED_GROSS_UPLOAD_STORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          GREED_GROSS_UPLOAD_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}
          GREED_GROSS_UPLOAD_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}
          GRADLEEOF
          
      - name: Setup RN gradle plugin
        run: |
          if [ -d "node_modules/@react-native/gradle-plugin" ]; then
            cd node_modules/@react-native/gradle-plugin
            mkdir -p build/com/facebook/react/react-native-gradle-plugin/0.79.0
            mkdir -p temp-jar/META-INF
            echo "Manifest-Version: 1.0" > temp-jar/META-INF/MANIFEST.MF
            cd temp-jar && jar cf ../build/com/facebook/react/react-native-gradle-plugin/0.79.0/react-native-gradle-plugin-0.79.0.jar * && cd ..
            echo '<?xml version="1.0" encoding="UTF-8"?><project><modelVersion>4.0.0</modelVersion><groupId>com.facebook.react</groupId><artifactId>react-native-gradle-plugin</artifactId><version>0.79.0</version></project>' > build/com/facebook/react/react-native-gradle-plugin/0.79.0/react-native-gradle-plugin-0.79.0.pom
            cd ../../..
          fi
          
      - name: Fix reanimated
        run: |
          sed -i '165s/if (appProject?.hermesEnabled?.toBoolean() || appProject?.ext?.react?.enableHermes?.toBoolean())/if (true)/' node_modules/react-native-reanimated/android/build.gradle || true
          
      - name: Build APK
        run: |
          cd GreedGross
          # Show what we're running
          echo "=== Running gradlew assembleRelease ==="
          ./gradlew assembleRelease --no-daemon --stacktrace 2>&1 | tee build.log
          BUILD_RESULT=${PIPESTATUS[0]}
          echo "=== Build exit code: $BUILD_RESULT ==="
          
          # Check if build actually succeeded
          if [ $BUILD_RESULT -ne 0 ]; then
            echo "ERROR: Build failed with exit code $BUILD_RESULT"
            echo "=== Last 100 lines of build log ==="
            tail -100 build.log
            exit 1
          fi
          
          # Check for APK
          echo "=== Checking for APK files ==="
          find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found!"
          ls -la app/build/outputs/apk/release/ 2>/dev/null || echo "Release directory doesn't exist!"
          
          if [ ! -f "app/build/outputs/apk/release/app-release.apk" ] && [ ! -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
            echo "ERROR: No APK was created!"
            exit 1
          fi
          
      - name: Upload APK
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: greed-gross-apk
          path: |
            GreedGross/app/build/outputs/apk/**/*.apk
            GreedGross/app/build/outputs/bundle/**/*.aab
          if-no-files-found: warn